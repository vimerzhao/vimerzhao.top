<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android实践 on 编程研讨会</title>
    <link>/categories/android%E5%AE%9E%E8%B7%B5/</link>
    <description>Recent content in Android实践 on 编程研讨会</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 12 Nov 2020 15:48:51 +0800</lastBuildDate><atom:link href="/categories/android%E5%AE%9E%E8%B7%B5/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>最好的Android投屏工具</title>
      <link>/posts/best-android-projector/</link>
      <pubDate>Thu, 12 Nov 2020 15:48:51 +0800</pubDate>
      
      <guid>/posts/best-android-projector/</guid>
      <description>背景 之前一直用Chrome的Vysor插件做投屏，最近这个插件无法使用了 手机连着USB，放在桌子里面，拿起来操作很不方便，胳膊肘疼 于是调研了下可选的投屏方案 AirDroid过于庞大，还要收费，而且公司</description>
    </item>
    
    <item>
      <title>Android客户端远程调试方法</title>
      <link>/posts/android-remote-debug-method/</link>
      <pubDate>Mon, 25 May 2020 12:16:13 +0800</pubDate>
      
      <guid>/posts/android-remote-debug-method/</guid>
      <description>在最近的需求开发中，会遇到一些兼容性问题，经常只能在特定ROM和Android版本上复现。由于测试和开发不在同一区域办公，往往需要通过物资穿梭车送手机。由此带来两点不便： 使用成本大，调试效率低，因为物</description>
    </item>
    
    <item>
      <title>插件化技术的演进之路</title>
      <link>/posts/evolution-of-plugin-framework/</link>
      <pubDate>Wed, 13 May 2020 12:14:43 +0800</pubDate>
      
      <guid>/posts/evolution-of-plugin-framework/</guid>
      <description>序言 关于本次分享 今天要和大家分享的是Android的插件化技术，这在Android中其实是一个相对来说比较复杂，历史悠久，内容庞杂的知识，不是今天一个小时能讲完的，所以我今天也是有选择地分享一些我认为</description>
    </item>
    
    <item>
      <title>设置Android全局可调试</title>
      <link>/posts/android-make-debuggable/</link>
      <pubDate>Thu, 07 May 2020 12:13:23 +0800</pubDate>
      
      <guid>/posts/android-make-debuggable/</guid>
      <description>背景 最近要看一些系统打印的日志，发现需要开启debuggable标志，于是调研了一下。 实现 参考https://www.renyiwei.com/archives/1704.html[Android修改</description>
    </item>
    
    <item>
      <title>Android P源码构建记录</title>
      <link>/posts/android-p-source-code-build/</link>
      <pubDate>Wed, 29 Apr 2020 12:11:29 +0800</pubDate>
      
      <guid>/posts/android-p-source-code-build/</guid>
      <description>缘由 最近在追查一个dex2oat的问题时，看源码觉得有些地方不单步调试或者加些日志，实在是不方便，另外由于最近的工作和Framework层打交道比较多，也有必要搞个源码环境，趁机深入学习一下。 虚拟机 一</description>
    </item>
    
    <item>
      <title>给DroidPlugin添加概览屏幕</title>
      <link>/posts/add-recent-task-for-droidplugin/</link>
      <pubDate>Thu, 02 Apr 2020 09:59:32 +0800</pubDate>
      
      <guid>/posts/add-recent-task-for-droidplugin/</guid>
      <description>背景 DroidPlugin默认不支持多任务： VirtualApp是支持的： 方案 其实参考的就是VirtualApp的实现，它的核心代码是： // com.lody.virtual.client.hook.proxies.am.HCallbackStub IBinder token = ActivityThread.ActivityClientRecord.token.get(r); ...... int taskId = IActivityManager.getTaskForActivity.call( ActivityManagerNative.getDefault.call(), token, false); 其实就是反射调用ActivityMa</description>
    </item>
    
    <item>
      <title>客户端调试日志编码之道</title>
      <link>/posts/zen-of-android-debug-log/</link>
      <pubDate>Thu, 05 Mar 2020 12:09:38 +0800</pubDate>
      
      <guid>/posts/zen-of-android-debug-log/</guid>
      <description>日志分很多种了，这里针对的是客户端的、开发调试用的日志，为什么要加这两个限制呢？ 后台日志都在服务器，开发容易操作，客户端日志大部分在本机，有的测试甚至不会捞日志，开发想帮忙都鞭长莫及 开发调试的日志，其</description>
    </item>
    
    <item>
      <title>基于Android签名机制的文件安全下发方法</title>
      <link>/posts/secure-file-transfer-base-on-android-signature/</link>
      <pubDate>Thu, 05 Mar 2020 12:05:39 +0800</pubDate>
      
      <guid>/posts/secure-file-transfer-base-on-android-signature/</guid>
      <description>问题背景 Android中存在大量需要动态下发文件的场景： 下发布局资源文件实现UI动态化 下发Dex文件、lua文件，实现局部功能的动态化 下发Android插件 下发多媒体资源等 等等 对于其中一些文件，如De</description>
    </item>
    
    <item>
      <title>Android安装包优化</title>
      <link>/posts/apk-size-opt-summary/</link>
      <pubDate>Tue, 11 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/apk-size-opt-summary/</guid>
      <description>背景 安装包膨胀的原因 业务的增加、产品的演进是安装包大小增加的本质原因。但是在演进之路上，由于一些所谓的技术债务，如： 使用的资源未经裁剪（如全量字体文件、分辨率过大的图片） 不合理的大资源（如大的视频、音</description>
    </item>
    
    <item>
      <title>Android安装包极限优化</title>
      <link>/posts/opt-apk-size-by-remove-debuginfo/</link>
      <pubDate>Fri, 17 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/opt-apk-size-by-remove-debuginfo/</guid>
      <description>背景 目前Android安装包的优化方法论比较成熟，比如 混淆代码（Proguard、AndResGuard） 移除不在使用的代码和资源 对于音频、图片等使用更轻量的格式 等等 这些方法都比较常规，在项目成熟后优</description>
    </item>
    
    <item>
      <title>自己动手写事件总线(EventBus)</title>
      <link>/posts/zi-ji-dong-shou-xie-shi-jian-zong-xian-eventbus/</link>
      <pubDate>Sun, 23 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/posts/zi-ji-dong-shou-xie-shi-jian-zong-xian-eventbus/</guid>
      <description>自己动手写事件总线(EventBus) 事件总线核心逻辑的实现。 EventBus的作用 Android中存在各种通信场景，如Activity之间的跳转，Activity与Fragment以及其他组件之间的</description>
    </item>
    
    <item>
      <title>自己动手写Android插件化框架</title>
      <link>/posts/zi-ji-dong-shou-xie-androidcha-jian-hua-kuang-jia/</link>
      <pubDate>Thu, 04 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/posts/zi-ji-dong-shou-xie-androidcha-jian-hua-kuang-jia/</guid>
      <description>自己动手写Android插件化框架 最近在工作中接触到了Android插件内的开发，发现自己这种技术还缺乏最基本的了解，以至于在一些基本问题上浪费不少时间，如插件Context和主工程Context的区</description>
    </item>
    
    <item>
      <title>【Android开发】TextView中getText()方法踩坑指南</title>
      <link>/posts/androidkai-fa-textviewzhong-gettext-fang-fa-cai-keng-zhi-nan/</link>
      <pubDate>Fri, 03 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/posts/androidkai-fa-textviewzhong-gettext-fang-fa-cai-keng-zhi-nan/</guid>
      <description>【Android开发】TextView中getText()方法踩坑指南 本文记录了在使用TextView的getText()方法时，由于编码不规范导致的诡异问题。 问题背景 大意可以描述为以下一段代码： public class</description>
    </item>
    
    <item>
      <title>全面了解Android热修复技术</title>
      <link>/posts/quan-mian-liao-jie-androidre-xiu-fu-ji-zhu/</link>
      <pubDate>Sun, 10 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/posts/quan-mian-liao-jie-androidre-xiu-fu-ji-zhu/</guid>
      <description>全面了解Android热修复技术 引言:本文全面地探讨了Android热修复技术的发展脉络，现状及其未来。 热修复技术概述 热修复技术在近年来飞速发展，尤其是在InstantRun方案推出之后，各种热修复技</description>
    </item>
    
    <item>
      <title>热补丁：Qzone方案在Dalvik虚拟机上的实现</title>
      <link>/posts/re-bu-ding-qzonefang-an-zai-dalvikxu-ni-ji-shang-de-shi-xian/</link>
      <pubDate>Mon, 21 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>/posts/re-bu-ding-qzonefang-an-zai-dalvikxu-ni-ji-shang-de-shi-xian/</guid>
      <description>热补丁：Qzone方案在Dalvik虚拟机上的实现 详细分析了Qzone热修复方案在Dalvik平台的实现，包括插桩的由来及其实现。 Qzone热修复原理分析 Qzone热修复方案基于的是android de</description>
    </item>
    
    <item>
      <title>InstantRun原理浅析</title>
      <link>/posts/instantrunyuan-li-qian-xi/</link>
      <pubDate>Thu, 17 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>/posts/instantrunyuan-li-qian-xi/</guid>
      <description>InstantRun原理浅析 本文从宏观上简要介绍了InstantRun的实现原理。 InstantRun概述 InstantRun是Android Studio2.0推出的新功能，旨在加快构建编译速度，提升</description>
    </item>
    
    <item>
      <title>热修复之资源更新的实现</title>
      <link>/posts/re-xiu-fu-zhi-zi-yuan-geng-xin-de-shi-xian/</link>
      <pubDate>Thu, 17 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>/posts/re-xiu-fu-zhi-zi-yuan-geng-xin-de-shi-xian/</guid>
      <description>热修复之资源更新的实现 本文分析了InstantRun的部分源码，并由此得出资源热修复的一种实现方法。 资源热修复 所谓资源热修复就是在不重新安装APP的情况下修改其资源，包括音频、图片，也包括布局、文字等</description>
    </item>
    
    <item>
      <title>热补丁：Tinker方案实现</title>
      <link>/posts/re-bu-ding-tinkerfang-an-shi-xian/</link>
      <pubDate>Thu, 03 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>/posts/re-bu-ding-tinkerfang-an-shi-xian/</guid>
      <description>热补丁：Tinker方案实现 本文简单分析了Tinker的实现原理并对dex文件更新做了演示Demo。 Qzone方案与Tinker 在之前的博客里简单介绍了Qzone超级热补丁的原理与实现，本文介绍了腾讯</description>
    </item>
    
    <item>
      <title>热补丁：Qzone方案在Art虚拟机上的实现</title>
      <link>/posts/re-bu-ding-qzonefang-an-zai-artxu-ni-ji-shang-de-shi-xian/</link>
      <pubDate>Sun, 30 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/posts/re-bu-ding-qzonefang-an-zai-artxu-ni-ji-shang-de-shi-xian/</guid>
      <description>热补丁：Qzone方案在Art虚拟机上的实现 本文对Qzone的超级热补丁方案做了一个简单实现。 引子 当一个App发布之后，突然发现了一个严重bug需要进行紧急修复，这时候公司各方就会忙得焦头烂额：重新打</description>
    </item>
    
  </channel>
</rss>
