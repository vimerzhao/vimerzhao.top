<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>category1 on V大师在一号线</title>
    <link>/categories/category1/</link>
    <description>Recent content in category1 on V大师在一号线</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 20 Dec 2020 19:49:29 +0800</lastBuildDate><atom:link href="/categories/category1/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>拿来主义与实证精神</title>
      <link>/posts/all-takenism-and-positivism/</link>
      <pubDate>Sun, 20 Dec 2020 19:49:29 +0800</pubDate>
      
      <guid>/posts/all-takenism-and-positivism/</guid>
      <description>由于工作原因，最近经常需要调研业界方案，因为很多很多东西没有必要重复造轮子，如果别人已经把问题解决了，那么直接使用是没啥问题的，这大概就是所谓的拿来主义。 其实纵观历史，尤其是近代，拿来主义其实不少，马</description>
    </item>
    
    <item>
      <title>做工具要有&#34;码德&#34;</title>
      <link>/posts/moral-of-developing-tools/</link>
      <pubDate>Thu, 10 Dec 2020 19:47:27 +0800</pubDate>
      
      <guid>/posts/moral-of-developing-tools/</guid>
      <description>最近在搞别的事情，没时间写公众号了，不过遇到值得写的，还是要草草记录一下的。 这周经历了一件比较奇葩的事情，大致时间线如下： 周四下午的时候，发现自己一个脚本使用的maven发布功能有一个奇怪的问题：正常</description>
    </item>
    
    <item>
      <title>AndroidStudio-Profile工具导致的一个奇怪问题</title>
      <link>/posts/android-profile-tool-bug-record/</link>
      <pubDate>Thu, 10 Dec 2020 12:36:32 +0800</pubDate>
      
      <guid>/posts/android-profile-tool-bug-record/</guid>
      <description>在使用AndroidStudio里面的Profile查看内存占用时，发现一个奇怪的现象： 应用启动后Native内存猛增，即使一个空的App也是如此，按理说不应该。于是用adb工具导出了一次内存： adb shell dumpsys</description>
    </item>
    
    <item>
      <title>Flutter源码剖析(四):flutter run流程解析</title>
      <link>/posts/flutter-source-code-analyze-4/</link>
      <pubDate>Sun, 22 Nov 2020 12:23:18 +0800</pubDate>
      
      <guid>/posts/flutter-source-code-analyze-4/</guid>
      <description>关于flutter run flutter run负责执行构建一个flutter工程，输出产物到对应设备，并负责提供基本的交互控制，使用效果如下： $ flutter run Launching lib/main.dart on COL AL10 in debug mode... Running Gradle task &amp;#39;assembleDebug&amp;#39;... Running Gradle task &amp;#39;assembleDebug&amp;#39;... Done 23.8s ✓ Built build/app/outputs/flutter-apk/app-debug.apk. Installing build/app/outputs/flutter-apk/app.apk... 13.7s Waiting for COL AL10 to report its views... 7ms Syncing files</description>
    </item>
    
    <item>
      <title>谈小步快跑</title>
      <link>/posts/thinking-on-sprint/</link>
      <pubDate>Wed, 18 Nov 2020 19:45:41 +0800</pubDate>
      
      <guid>/posts/thinking-on-sprint/</guid>
      <description>突然觉得需要好好理解一下小步快跑的含义，因为最近的工作就是一个需要小步快跑的工作。 经过一段时间的摸索之后，我觉得当前工作可以分为四个阶段： 接入，踩一遍可能遇到的坑，积累开发经验，证明性能和跨平台的可行</description>
    </item>
    
    <item>
      <title>Flutter源码剖析(三):Flutter-Android-Embedder启动流程</title>
      <link>/posts/flutter-source-code-analyze-3/</link>
      <pubDate>Sun, 15 Nov 2020 12:23:15 +0800</pubDate>
      
      <guid>/posts/flutter-source-code-analyze-3/</guid>
      <description>概述 Flutter的启动包括Embedder、Engine、Framework三部分，本文仅描述Android平台的Embdder模块的启动流程。Flutter通常通过启动一个FlutterActiv</description>
    </item>
    
    <item>
      <title>gitbook安装中的一些问题</title>
      <link>/posts/gitbook-install-record/</link>
      <pubDate>Fri, 13 Nov 2020 15:50:24 +0800</pubDate>
      
      <guid>/posts/gitbook-install-record/</guid>
      <description>在新的iMac上安装gitbook后，一直无法使用，提示错误如下： Installing GitBook 3.2.3 if (cb) cb.apply(this, arguments) TypeError: cb.apply is not a function at /usr/local/lib/node_modules/gitbook-cli/node_modules/npmi/node_modules/npm/node_modules/graceful-fs/polyfills.js:267:18 at FSReqCallback.oncomplete (fs.js:169:5) 查找诸多问题后，最终确定是新版本的问题，可以通过nvm这个工具控制node的版本，npm不需要关心</description>
    </item>
    
    <item>
      <title>最好的Android投屏工具</title>
      <link>/posts/best-android-projector/</link>
      <pubDate>Thu, 12 Nov 2020 15:48:51 +0800</pubDate>
      
      <guid>/posts/best-android-projector/</guid>
      <description>背景 之前一直用Chrome的Vysor插件做投屏，最近这个插件无法使用了 手机连着USB，放在桌子里面，拿起来操作很不方便，胳膊肘疼 于是调研了下可选的投屏方案 AirDroid过于庞大，还要收费，而且公司</description>
    </item>
    
    <item>
      <title>Flutter源码剖析(二):源码的阅读与调试环境配置</title>
      <link>/posts/flutter-source-code-analyze-2/</link>
      <pubDate>Thu, 05 Nov 2020 12:23:13 +0800</pubDate>
      
      <guid>/posts/flutter-source-code-analyze-2/</guid>
      <description>综述 Flutter从架构上来说有3部分： 用Dart写的Framework层，面向开发者 用Java/Kotlin写的Embdder层（For Android，iOS是OC/Swift），纯Flutter A</description>
    </item>
    
    <item>
      <title>Mac外接显示器问题处理记录</title>
      <link>/posts/macbook-external-display/</link>
      <pubDate>Thu, 29 Oct 2020 15:46:57 +0800</pubDate>
      
      <guid>/posts/macbook-external-display/</guid>
      <description>背景 最近双十一，买了一台AOC的外接显示器，4K分辨率。为了达到最大的使用体验，处理了一些问题，在此记录。 睡眠唤醒 一开始用type-c的线连接，发现每次电脑睡眠后，重新唤醒时外接屏幕无法唤醒，打开显示</description>
    </item>
    
    <item>
      <title>Flutter源码剖析(一):源码获取与构建</title>
      <link>/posts/flutter-source-code-analyze-1/</link>
      <pubDate>Thu, 29 Oct 2020 12:23:10 +0800</pubDate>
      
      <guid>/posts/flutter-source-code-analyze-1/</guid>
      <description>概述 本文介绍了Flutter源码的获取与构建，后面会另有文章介绍Flutter源码的版本管理、开发环境搭建等主题。 准备工作 Flutter源码分为两个部分： flutter/flutter是框架层，为开发</description>
    </item>
    
    <item>
      <title>毛选精读（一）内核：《实践论》与《矛盾论》</title>
      <link>/posts/maoxuan-kernel/</link>
      <pubDate>Sat, 17 Oct 2020 23:44:11 +0800</pubDate>
      
      <guid>/posts/maoxuan-kernel/</guid>
      <description>概述 个人认为，读毛选应该先读《实践论》和《矛盾论》，这两篇发表于1937年下旬的文章，上承土地革命战争（1927～1937），下启启抗日战争和解放战争。在过往的十年里，共产党先后经历了右倾机会主义和左</description>
    </item>
    
    <item>
      <title>为什么读毛选以及怎么读毛选</title>
      <link>/posts/why-and-how-read-maoxuan/</link>
      <pubDate>Sat, 10 Oct 2020 23:41:01 +0800</pubDate>
      
      <guid>/posts/why-and-how-read-maoxuan/</guid>
      <description>为什么读 领袖发家史、中国近代史 首先，《毛选》可以说是领袖的一本自传，也从侧面反映了近代中国从第一次国内革命战争时期到文化大革命时期，70年波澜壮阔的历史。 领袖曾在17岁作诗： 《七绝·改诗赠父亲》 孩儿立</description>
    </item>
    
    <item>
      <title>自我奋斗与历史进程</title>
      <link>/posts/self-struggle-and-historical-itinerary/</link>
      <pubDate>Fri, 09 Oct 2020 20:18:33 +0800</pubDate>
      
      <guid>/posts/self-struggle-and-historical-itinerary/</guid>
      <description>一 人生的道路虽然漫长，但要紧处常常只有几步，特别是当人年轻的时候。 没有一个人的生活道路是笔直的，没有岔道的，有些岔道口譬如政治上岔道口，个人生活上的岔道口，你走错一步，可以影响人生的一个时期，也可以影</description>
    </item>
    
    <item>
      <title>Android系统服务的注册缓存机制分析</title>
      <link>/posts/android-system-service-cache-analyze/</link>
      <pubDate>Fri, 21 Aug 2020 12:18:22 +0800</pubDate>
      
      <guid>/posts/android-system-service-cache-analyze/</guid>
      <description>本文说明 本文虽名为《Android系统服务的注册缓存机制分析》，但主要记录的是笔者最近解决一个单机型Bug的经历。在解决这个Bug的过程中，我对于Android系统服务的注册缓存机制也有了更深入的了解</description>
    </item>
    
    <item>
      <title>拾屋记</title>
      <link>/posts/clean-my-room/</link>
      <pubDate>Sun, 21 Jun 2020 20:16:53 +0800</pubDate>
      
      <guid>/posts/clean-my-room/</guid>
      <description>最近要搬家，周末收拾了下，记录一点感悟。 破窗效应 本来整洁有序的房间，因为一两次松懈，或是没有及时把用过的物品归回原位，或是没有及时清理产生的垃圾，就形成了一扇破窗。破窗的产生导致了自己对周围环境要求的</description>
    </item>
    
    <item>
      <title>读书:《吃掉那只青蛙》</title>
      <link>/posts/eat-that-frog/</link>
      <pubDate>Sat, 20 Jun 2020 09:44:18 +0800</pubDate>
      
      <guid>/posts/eat-that-frog/</guid>
      <description>笔记 C01 明确目标 第一步：明确你究竟想要什么 第二步：把你的目标写下来 第三步：为你的目标设定一个完成的最后期限 第四步：为了实现目标，把你所能想到的、所有要完成的事项都列在一个清单上 第五步：进一步梳理整个清单</description>
    </item>
    
    <item>
      <title>Android客户端远程调试方法</title>
      <link>/posts/android-remote-debug-method/</link>
      <pubDate>Mon, 25 May 2020 12:16:13 +0800</pubDate>
      
      <guid>/posts/android-remote-debug-method/</guid>
      <description>在最近的需求开发中，会遇到一些兼容性问题，经常只能在特定ROM和Android版本上复现。由于测试和开发不在同一区域办公，往往需要通过物资穿梭车送手机。由此带来两点不便： 使用成本大，调试效率低，因为物</description>
    </item>
    
    <item>
      <title>读书:《时间管理：如何充分利用你的24小时》</title>
      <link>/posts/the-skinny-on-time-management/</link>
      <pubDate>Sat, 23 May 2020 09:43:08 +0800</pubDate>
      
      <guid>/posts/the-skinny-on-time-management/</guid>
      <description></description>
    </item>
    
    <item>
      <title>解决MacBook2018过热问题</title>
      <link>/posts/macbook-over-hot/</link>
      <pubDate>Tue, 19 May 2020 10:21:13 +0800</pubDate>
      
      <guid>/posts/macbook-over-hot/</guid>
      <description>最近搬工位后给MacBook接了一个外接显示器，放在正中间，但是发现发热很严重。在查阅资料和尝试之后，发现把充电口和显示器接口放在右边比较好。左边好像有个Bug，能不用还是不要用了。 参考： Mac过热降</description>
    </item>
    
    <item>
      <title>插件化技术的演进之路</title>
      <link>/posts/evolution-of-plugin-framework/</link>
      <pubDate>Wed, 13 May 2020 12:14:43 +0800</pubDate>
      
      <guid>/posts/evolution-of-plugin-framework/</guid>
      <description>序言 关于本次分享 今天要和大家分享的是Android的插件化技术，这在Android中其实是一个相对来说比较复杂，历史悠久，内容庞杂的知识，不是今天一个小时能讲完的，所以我今天也是有选择地分享一些我认为</description>
    </item>
    
    <item>
      <title>设置Android全局可调试</title>
      <link>/posts/android-make-debuggable/</link>
      <pubDate>Thu, 07 May 2020 12:13:23 +0800</pubDate>
      
      <guid>/posts/android-make-debuggable/</guid>
      <description>背景 最近要看一些系统打印的日志，发现需要开启debuggable标志，于是调研了一下。 实现 参考https://www.renyiwei.com/archives/1704.html[Android修改</description>
    </item>
    
    <item>
      <title>不气盛叫年轻人吗？</title>
      <link>/posts/2020-youth-day/</link>
      <pubDate>Mon, 04 May 2020 20:16:02 +0800</pubDate>
      
      <guid>/posts/2020-youth-day/</guid>
      <description>这两天，被bilibili献给新一代的演讲《后浪》刷屏了，其实这是我们的老传统了，在这样一个意义重大的节日，讲一部分的真话，来刻意迎合一部分人的爽点。作为一个B站的中度用户，其实我是有点不喜欢的，但不</description>
    </item>
    
    <item>
      <title>Mac OSX配置记录</title>
      <link>/posts/mac-osx-config-record/</link>
      <pubDate>Mon, 04 May 2020 12:33:35 +0800</pubDate>
      
      <guid>/posts/mac-osx-config-record/</guid>
      <description>浏览器 下载Chrome 按键映射 下载Karabiner-Elements，按照 配置，就是自己习惯的键位了。 禁用大写锁定: “System Preferences” -&amp;gt; “Keyboard” -&amp;gt; “Modifier K</description>
    </item>
    
    <item>
      <title>老版《三国演义》中的曹操</title>
      <link>/posts/sanguo-caocao/</link>
      <pubDate>Sat, 02 May 2020 20:14:57 +0800</pubDate>
      
      <guid>/posts/sanguo-caocao/</guid>
      <description>近来看了一篇鲍国安先生在拍摄《三国演义》期间的创作手记，不禁感慨这才是一个演员的自我修养呀，比现在这些小鲜肉不知道高到哪里去了。这篇手记如果湮没在各种混杂的信息中实在太可惜，故此整理出来，也可警示自己</description>
    </item>
    
    <item>
      <title>记一个博客刷新的Bug</title>
      <link>/posts/blog-refresh-bugfix/</link>
      <pubDate>Thu, 30 Apr 2020 10:20:44 +0800</pubDate>
      
      <guid>/posts/blog-refresh-bugfix/</guid>
      <description>之前通过教程草草建立了一个博客，后来申请到了备案号，于是更新了代码，但是Gunicorn操作不是很熟悉，导致重启服务后出现了如下问题： 备案号时有时无，今天又要添加公安备案号，于是打算查查这个问题，发现</description>
    </item>
    
    <item>
      <title>Android P源码构建记录</title>
      <link>/posts/android-p-source-code-build/</link>
      <pubDate>Wed, 29 Apr 2020 12:11:29 +0800</pubDate>
      
      <guid>/posts/android-p-source-code-build/</guid>
      <description>缘由 最近在追查一个dex2oat的问题时，看源码觉得有些地方不单步调试或者加些日志，实在是不方便，另外由于最近的工作和Framework层打交道比较多，也有必要搞个源码环境，趁机深入学习一下。 虚拟机 一</description>
    </item>
    
    <item>
      <title>表达的世界观基础与方法论建设</title>
      <link>/posts/base-and-skill-of-presentation/</link>
      <pubDate>Sat, 25 Apr 2020 20:13:50 +0800</pubDate>
      
      <guid>/posts/base-and-skill-of-presentation/</guid>
      <description>编号004。 核心内容。 为什么想讲这个主题，起因之一就是自己第一次做技术分享时效果就很差，后面自己对此进行了一些反思。除此之外，自己也听过不少其他人（主要是技术同学）的分享，也会发现一些不足之处。所以我</description>
    </item>
    
    <item>
      <title>Android P内联优化导致的一个诡异Bug</title>
      <link>/posts/solve-of-android-p-inline-opt/</link>
      <pubDate>Fri, 24 Apr 2020 23:51:25 +0800</pubDate>
      
      <guid>/posts/solve-of-android-p-inline-opt/</guid>
      <description>问题背景 最近，我们的业务在动态加载一款第三方游戏时出现了奇怪的现象，本地开发测试体验良好，但是使用CI构建的正式包体验时会出现启动闪退。 问题分析 分析日志 首先，我们自然而然看了下Crash日志，如下： ---------</description>
    </item>
    
    <item>
      <title>Windows10下VirtualBox不支持64位</title>
      <link>/posts/virtualbox-lose-64-bit/</link>
      <pubDate>Mon, 20 Apr 2020 10:20:21 +0800</pubDate>
      
      <guid>/posts/virtualbox-lose-64-bit/</guid>
      <description>参考https://www.4spaces.org/windows-10-virtualbox-no-64bit/[解决Windows10中Virtualbox安装虚拟机没有64位选项(N种情形盘点)</description>
    </item>
    
    <item>
      <title>代码相似性检测工具</title>
      <link>/posts/software-similarity-tester/</link>
      <pubDate>Tue, 14 Apr 2020 12:33:16 +0800</pubDate>
      
      <guid>/posts/software-similarity-tester/</guid>
      <description>背景 最近由于工作需要，想找一个能够检查代码相似性的工具。这种工具主要有两个应用： 代码自身的冗余检查 查重，例如检查学生的编程作业是否有抄袭 工具 最后找到了两个工具sim和moss，具体实现算法还没有研究，</description>
    </item>
    
    <item>
      <title>记一次诡异的Bug</title>
      <link>/posts/a-weird-bug-record/</link>
      <pubDate>Mon, 13 Apr 2020 10:01:17 +0800</pubDate>
      
      <guid>/posts/a-weird-bug-record/</guid>
      <description>背景 上周四的时候，发了一个maven，结果报ExceptionInInitializerError错误： java.lang.ExceptionInInitializerError at repackage.aw.̍(ProGuard:43) at com.tencent.sandbox.PluginHelper.applicationAttachBaseContext(ProGuard:160) ...... Caused by: java.lang.IllegalArgumentException: Illegal pattern character &amp;#39;V&amp;#39; at java.text.SimpleDateFormat.compile(SimpleDateFormat.java:870) at java.text.SimpleDateFormat.initialize(SimpleDateFormat.java:684) at java.text.SimpleDateFormat.&amp;lt;init&amp;gt;(SimpleDateFormat.java:623) at java.text.SimpleDateFormat.&amp;lt;init&amp;gt;(SimpleDateFormat.java:598) at</description>
    </item>
    
    <item>
      <title>twint源码阅读笔记</title>
      <link>/posts/read-twint/</link>
      <pubDate>Sun, 05 Apr 2020 23:48:26 +0800</pubDate>
      
      <guid>/posts/read-twint/</guid>
      <description>介绍 twint全称Twitter Intelligence Tool，是一个twitter爬虫工具。官方介绍如下： Twint is an advanced Twitter scraping tool written in Python that allows for scraping Tweets from Twitter profiles without using Twitter’s API. Twint utilizes Twitter’s search operators to let you scrape Tweets from specific users, scrape Tweets relating to certain</description>
    </item>
    
    <item>
      <title>我的tmux使用手册</title>
      <link>/posts/my-tmux-manual/</link>
      <pubDate>Sun, 05 Apr 2020 12:33:00 +0800</pubDate>
      
      <guid>/posts/my-tmux-manual/</guid>
      <description>基础概念 Session：用来概括一个任务，是一组窗口的集合。通过在任务开始前创建一个Session，在该Session中进行任务，之后通过断开Session来暂时中断任务，此时与任务相关的状态都会保存</description>
    </item>
    
    <item>
      <title>读书:《演说之禅》</title>
      <link>/posts/presentation-zen/</link>
      <pubDate>Sun, 05 Apr 2020 09:32:45 +0800</pubDate>
      
      <guid>/posts/presentation-zen/</guid>
      <description>概览 这本书的副标题叫做&amp;#34;`职场必知的幻灯片秘技`&amp;#34;，但感觉有点不合适，在我看来，书里提倡的思想只有真正的大师才能用，但是在职场，很多时候还是要按照规矩来。如果不是绝对的权利压制，还是不</description>
    </item>
    
    <item>
      <title>给DroidPlugin添加概览屏幕</title>
      <link>/posts/add-recent-task-for-droidplugin/</link>
      <pubDate>Thu, 02 Apr 2020 09:59:32 +0800</pubDate>
      
      <guid>/posts/add-recent-task-for-droidplugin/</guid>
      <description>背景 DroidPlugin默认不支持多任务： VirtualApp是支持的： 方案 其实参考的就是VirtualApp的实现，它的核心代码是： // com.lody.virtual.client.hook.proxies.am.HCallbackStub IBinder token = ActivityThread.ActivityClientRecord.token.get(r); ...... int taskId = IActivityManager.getTaskForActivity.call( ActivityManagerNative.getDefault.call(), token, false); 其实就是反射调用ActivityMa</description>
    </item>
    
    <item>
      <title>读书:《运动饮食1:9》</title>
      <link>/posts/sports-and-diet/</link>
      <pubDate>Sun, 29 Mar 2020 09:31:36 +0800</pubDate>
      
      <guid>/posts/sports-and-diet/</guid>
      <description>疫情期间基本荒废了之前的锻炼成果，最近要开始恢复锻炼了，所以选了一本书温习下基本知识。 纯运动无法减肥 胖的本质是吃的太多，摄入&amp;gt;消耗 有氧运动会促进食欲，影响减肥效果 不要神化基础代谢 运动如果以减肥为</description>
    </item>
    
    <item>
      <title>Android混淆问题一则</title>
      <link>/posts/android-proguard-problem/</link>
      <pubDate>Tue, 24 Mar 2020 09:56:45 +0800</pubDate>
      
      <guid>/posts/android-proguard-problem/</guid>
      <description>问题 dex包里面的build.gradle通过api引用了一个包，同事主工程调用dex包里面的方法抛出ClassNotFoundException。 分析 使用AS的Analyze APK发现该类其实是存在</description>
    </item>
    
    <item>
      <title>记一次AbstractMethodError</title>
      <link>/posts/abstractmethoderror-solve/</link>
      <pubDate>Tue, 24 Mar 2020 09:55:46 +0800</pubDate>
      
      <guid>/posts/abstractmethoderror-solve/</guid>
      <description>最近在灰度的时候发现了一个Error： 详细信息如下： 结合机型分布，可以判断是部分ROM自己的修改导致的问题(因为已经走到系统Api里面了)。 最后直接catch住了，因为触发的机型其实很少，灰度15w，</description>
    </item>
    
    <item>
      <title>读书:《俞军产品方法论》</title>
      <link>/posts/yujun-product-methodology/</link>
      <pubDate>Sun, 22 Mar 2020 09:30:19 +0800</pubDate>
      
      <guid>/posts/yujun-product-methodology/</guid>
      <description>正文 这两周利用零散时间粗读了《俞军产品方法论》一书，在查阅资料的时候发现这本书的豆瓣评分从一开始的8.8(2019-12-24)变成了现在(2020-03-22)的7.9，也是比较符合我自己的阅读感受</description>
    </item>
    
    <item>
      <title>Proguard导致的NoSuchMethodException问题排查</title>
      <link>/posts/proguard-result-in-nosuchmethodexception/</link>
      <pubDate>Mon, 16 Mar 2020 09:54:14 +0800</pubDate>
      
      <guid>/posts/proguard-result-in-nosuchmethodexception/</guid>
      <description>背景 之前项目的混淆配置一直没开启Proguard的优化选项 -dontoptimize 最近为了做安装包优化，把这行注释掉了 #-dontoptimize 问题 于是项目里的各种优化配置开始生效了，但是测试反馈了一个Bug：悬浮窗的搜索框点击之后没有反应了。 排</description>
    </item>
    
    <item>
      <title>博客往事</title>
      <link>/posts/history-of-my-blog/</link>
      <pubDate>Sun, 15 Mar 2020 19:41:05 +0800</pubDate>
      
      <guid>/posts/history-of-my-blog/</guid>
      <description>周末花了点时间，把废置了的域名 www.vimerzhao.top 重新折腾了一下，同时将之前写过的博客迁移到了自己的服务器上。 借此机会，也以博客为脉络谈谈最近几年的技术经历吧。 CSDN 我大概是15年开始接触编程的，现在能找到的最早的博客是1</description>
    </item>
    
    <item>
      <title>客户端调试日志编码之道</title>
      <link>/posts/zen-of-android-debug-log/</link>
      <pubDate>Thu, 05 Mar 2020 12:09:38 +0800</pubDate>
      
      <guid>/posts/zen-of-android-debug-log/</guid>
      <description>日志分很多种了，这里针对的是客户端的、开发调试用的日志，为什么要加这两个限制呢？ 后台日志都在服务器，开发容易操作，客户端日志大部分在本机，有的测试甚至不会捞日志，开发想帮忙都鞭长莫及 开发调试的日志，其</description>
    </item>
    
    <item>
      <title>基于Android签名机制的文件安全下发方法</title>
      <link>/posts/secure-file-transfer-base-on-android-signature/</link>
      <pubDate>Thu, 05 Mar 2020 12:05:39 +0800</pubDate>
      
      <guid>/posts/secure-file-transfer-base-on-android-signature/</guid>
      <description>问题背景 Android中存在大量需要动态下发文件的场景： 下发布局资源文件实现UI动态化 下发Dex文件、lua文件，实现局部功能的动态化 下发Android插件 下发多媒体资源等 等等 对于其中一些文件，如De</description>
    </item>
    
    <item>
      <title>B站2月份创作者分析</title>
      <link>/posts/bilibili-report-2020-02/</link>
      <pubDate>Sun, 01 Mar 2020 19:57:34 +0800</pubDate>
      
      <guid>/posts/bilibili-report-2020-02/</guid>
      <description>Welcome Star and Issues: vimerzhao/BilibiliReport 各区投稿比例 前三： 游戏 生活 影视 头部区域细分比例 Top1000视频分布 稿件时长分布 每日投稿趋势 24小时投稿分布 结论 超过60%的创作发生在游戏区和生活区 播放最多的是代表视听的音乐区和娱乐区 但是收</description>
    </item>
    
    <item>
      <title>UnsatisfiedLinkError...is32-bit instead of 64-bit问题解决</title>
      <link>/posts/solve-unsatisfiedlinkerror-is-32-bit-instead-of-64-bit/</link>
      <pubDate>Fri, 28 Feb 2020 09:52:52 +0800</pubDate>
      
      <guid>/posts/solve-unsatisfiedlinkerror-is-32-bit-instead-of-64-bit/</guid>
      <description>背景 在做沙箱动态化时遇到一个问题： 请假其他同事之后发现是因为Android高版本上，默认是64-bit的方式运行，而某些游戏是32-bit的，所以出现了冲突，解决办法就是强制使用32-bit的，而不是</description>
    </item>
    
    <item>
      <title>读书:《小岛经济学》</title>
      <link>/posts/how-an-economy-grows-and-why-it-crashes/</link>
      <pubDate>Sun, 16 Feb 2020 09:27:34 +0800</pubDate>
      
      <guid>/posts/how-an-economy-grows-and-why-it-crashes/</guid>
      <description>如果将这本书仅仅看作经济学的入门读物，我觉得有失公允，因为这本书对于当下的很多经济现象做了深刻的剖析，且非常鲜明的表达了自己的观点。 + From:推荐序 概览 一开始以为这本书是入门读物，读完有三点感受： 前</description>
    </item>
    
    <item>
      <title>防止WebView因为GC被回收</title>
      <link>/posts/keep-webview-from-gc/</link>
      <pubDate>Tue, 11 Feb 2020 09:47:55 +0800</pubDate>
      
      <guid>/posts/keep-webview-from-gc/</guid>
      <description>今天遇到一个问题，前端反映说我们共同约定的一个隐藏WebView无法调试，现象如下： 可以看到，小测试这个Tab一出现就消失了，但是同样的代码放在测试Demo里面就没问题，分析之后发现是实际工程里面产生</description>
    </item>
    
    <item>
      <title>红利永远都在的</title>
      <link>/posts/there-are-chances-somewhere/</link>
      <pubDate>Mon, 10 Feb 2020 20:12:59 +0800</pubDate>
      
      <guid>/posts/there-are-chances-somewhere/</guid>
      <description>今天有个同事在群里分享了一件事情，他面试的一个人独立开发了一个多开app的应用（一种能让某台手机同时打开多个相同app技术，常见的如微信双开），去年年底已经实现了日入1000~2000的水平，实属让人</description>
    </item>
    
    <item>
      <title>成为一个完整的社会人</title>
      <link>/posts/base-ability/</link>
      <pubDate>Thu, 06 Feb 2020 20:11:55 +0800</pubDate>
      
      <guid>/posts/base-ability/</guid>
      <description>引言 本文是笔者的一些自我反思，工作一年半以来，不足之处的复盘。整理成文，以告过往，以警将来，希望对别人亦有所帮助。 本文将一个完整的社会人应该具备的能力分成了两大类：必修和选修。和大学里面的课程类似，必</description>
    </item>
    
    <item>
      <title>读书:《娱乐至死》</title>
      <link>/posts/amusing-ourselves-to-death/</link>
      <pubDate>Sat, 01 Feb 2020 09:24:31 +0800</pubDate>
      
      <guid>/posts/amusing-ourselves-to-death/</guid>
      <description>今天要和大家分享的书是尼尔·波兹曼的《娱乐至死》。娱乐至死，这个词我们或多或少都有耳闻，虽然这本书出版于1985年，并且讨论的目标主要是电视机娱乐，但直到互联网时代，这个观念才逐渐为人所熟知。用书中的</description>
    </item>
    
    <item>
      <title>读书:《学会写作》</title>
      <link>/posts/learn-writing-by-zhouzuoluo/</link>
      <pubDate>Thu, 16 Jan 2020 09:21:10 +0800</pubDate>
      
      <guid>/posts/learn-writing-by-zhouzuoluo/</guid>
      <description>最近利用两个周末的时间读完了一本书，叫《学会写作》，豆瓣信息如下： 作者: 粥左罗 + 出版社: 人民邮电出版社 + 出品方: 智元微库 OPEN MIND + 副标题: 自我进阶的高效方法 + 出版年: 2019-5 + 页数: 280 + 定价: 59元 + 装帧: 平装</description>
    </item>
    
    <item>
      <title>研究|2019鬼畜区热点事件分析</title>
      <link>/posts/2019-vichiku-summary-2/</link>
      <pubDate>Sat, 11 Jan 2020 19:53:53 +0800</pubDate>
      
      <guid>/posts/2019-vichiku-summary-2/</guid>
      <description>不小心把markdown删了，看公众号吧： 研究 | 2019鬼畜区热点事件分析</description>
    </item>
    
    <item>
      <title>通过7万条视频数据看2019年B站鬼畜区发生了什么</title>
      <link>/posts/2019-vichiku-summary/</link>
      <pubDate>Sun, 05 Jan 2020 19:51:58 +0800</pubDate>
      
      <guid>/posts/2019-vichiku-summary/</guid>
      <description>前言 鬼畜就是通过对严肃正经话题进行解剖后通过重复，再创作等形式用以达到颠覆经典、解构传统、张扬个性、强化焦点、讽刺社会的一种艺术形式。 引自百度百科 作为常年混迹于B站鬼畜区的潜水怪，今天心血来潮，趁着周</description>
    </item>
    
    <item>
      <title>2019年终总结</title>
      <link>/posts/2019-end/</link>
      <pubDate>Wed, 01 Jan 2020 20:02:29 +0800</pubDate>
      
      <guid>/posts/2019-end/</guid>
      <description>水逆的上半年 上半年其实是相当平淡的，回头想想，有很多事情可以去做，只是当时囿于那个环境和心态，不能下定决心去做。工作上经历了很多变动，很多老同事离开了团队，甚至组织架构也发生了变动，自己也在一次次的动</description>
    </item>
    
    <item>
      <title>读书:《刻意练习》</title>
      <link>/posts/pead/</link>
      <pubDate>Sat, 28 Dec 2019 09:19:39 +0800</pubDate>
      
      <guid>/posts/pead/</guid>
      <description>这本书豆瓣评分7.9，最大的问题就是信息密度太低，大概就是一篇几千字的公众号文章能讲明白的事情，作者却用了大量篇幅去举例，导致这个命题的信息量膨胀成了一本书。此外，这本的结构划分也不是很合理，导致很多</description>
    </item>
    
    <item>
      <title>读书:《乡土中国》</title>
      <link>/posts/earthbound-china/</link>
      <pubDate>Sun, 22 Dec 2019 09:18:06 +0800</pubDate>
      
      <guid>/posts/earthbound-china/</guid>
      <description>概览 本书是费孝通1937年在云南教书时，从《乡村社会学》这门课的讲义中整理而来，书中的观点都是作者实地考察和教学思考的结果，充分分析了乡村社会的特点及其成因，豆瓣评分9.2，当之无愧的大师之作。不同于</description>
    </item>
    
    <item>
      <title>文档编写的术与道</title>
      <link>/posts/tao-and-art-of-writing-tech-docs/</link>
      <pubDate>Thu, 19 Dec 2019 19:38:07 +0800</pubDate>
      
      <guid>/posts/tao-and-art-of-writing-tech-docs/</guid>
      <description>文档的范围很广，本文特指 开发人员撰写的包含基本产品背景和主要技术设计的文档 。 世界观 为什么要写技术文档 对于这个问题，我个人觉得很容易回答，写技术文档可以帮助团队完成 当前的信息共享和长期的知识传承 。对于个</description>
    </item>
    
    <item>
      <title>Git工程化最佳实践</title>
      <link>/posts/git-practice/</link>
      <pubDate>Fri, 13 Dec 2019 12:32:25 +0800</pubDate>
      
      <guid>/posts/git-practice/</guid>
      <description>本文导读 本文对应的 git-standardize 项目地址 https://github.com/vimerzhao/git-standardize 问题背景 大部分程序员对于Git的理解还停留在 git add . git commit -m &amp;#34;update&amp;#34; git pull git push 的阶段，但这在实际项目开发中是远远不够的。 + 举一个简单的例子，现在我们需要过滤所有修复bug的提交，该怎</description>
    </item>
    
    <item>
      <title>修改遗留代码的艺术</title>
      <link>/posts/working-effectively-with-legacy-code/</link>
      <pubDate>Mon, 02 Dec 2019 19:35:55 +0800</pubDate>
      
      <guid>/posts/working-effectively-with-legacy-code/</guid>
      <description>导语 之前内部的一次技术分享，为了防止PPT弄丢，特意整理成了文章，由于我的PPT风格比较简洁，所以额外加了一些批注。 + 注意这里图片缩小了，可以 新标签页打开图片 查看高清图。 正文 1. 2. 3. 4. 5. 6. 7 这页其实还内</description>
    </item>
    
    <item>
      <title>Git内部原理剖析</title>
      <link>/posts/git-internals/</link>
      <pubDate>Tue, 26 Nov 2019 12:31:51 +0800</pubDate>
      
      <guid>/posts/git-internals/</guid>
      <description>导读 为什么写这篇文章 写这篇文章的本意有二: 工作安排原因，常有同事询问我一些关于 Git 的问题，总觉得自己解释的不够透彻，因此觉得有必要深入了解一下。 目前中文的 Git 教程往往本末倒置， 一味从版本管理工具的角度去堆</description>
    </item>
    
    <item>
      <title>信息、思考、知识</title>
      <link>/posts/model-of-thinking/</link>
      <pubDate>Mon, 25 Nov 2019 20:01:28 +0800</pubDate>
      
      <guid>/posts/model-of-thinking/</guid>
      <description>最近在思考的一个问题，当一件热点事件发生的时候，如何能够透过各种声音看到问题的本质，并给出客观、全面的评价，这其实是一件非常困难的事情，我觉得必须具备三要素。 知识 知识就像机器学习里面的训练集。放到具体</description>
    </item>
    
    <item>
      <title>网易裁员碎碎念</title>
      <link>/posts/about-netease-staff/</link>
      <pubDate>Sun, 24 Nov 2019 19:59:50 +0800</pubDate>
      
      <guid>/posts/about-netease-staff/</guid>
      <description>这两天被一篇文章刷屏了，即 网易裁员，让保安把身患绝症的我赶出公司。我在网易亲身经历的噩梦！ 。 + 正好这周上了一门课叫《独立思考》，里面提到了认识真相的五大阻力： 从众心理 认知偏见 情绪干扰 思维局限 逻辑谬误 这</description>
    </item>
    
    <item>
      <title>YouGlish介绍</title>
      <link>/posts/introduction-of-youglish/</link>
      <pubDate>Sat, 23 Nov 2019 12:31:31 +0800</pubDate>
      
      <guid>/posts/introduction-of-youglish/</guid>
      <description>YouGlish是干嘛的呢？它的官网已经说的很清楚了: Use YouTube to improve your English pronunciation. Real people, real situations. 发现这个网站的起因是笔者在准备技术分享的时候涉及到一个专业名词 VSync ，这个词是 Vertical Sync的缩写，算是一个技术专有名词，用 YouGlish 一搜就</description>
    </item>
    
    <item>
      <title>Flutter:移动端跨平台技术演进之路</title>
      <link>/posts/cross-platform-mobile-ui-development-evolution/</link>
      <pubDate>Wed, 06 Nov 2019 12:21:29 +0800</pubDate>
      
      <guid>/posts/cross-platform-mobile-ui-development-evolution/</guid>
      <description>导读 本文约4688字，阅读可能需要15分钟。 最早的跨平台开发(摘自《Apache Cordova移动应用开发实战》王亚飞，王洪飞编著). 从广义上来说，跨平台技术早于移动端的出现。因此，本文标题前面也加上</description>
    </item>
    
    <item>
      <title>小白的理财入门课</title>
      <link>/posts/financing-introduction/</link>
      <pubDate>Sat, 02 Nov 2019 09:16:19 +0800</pubDate>
      
      <guid>/posts/financing-introduction/</guid>
      <description>发刊词:未来穷人更穷,富人更富 钱背后的含义?贫富差距(基尼系数) 教育 寒门再难出贵子 概率学显示,85%状元都是城镇户口 父母的资源决定了子女的眼界等 医疗 有钱能让人获得更多的&amp;#34;`隐形福利`&amp;#34;</description>
    </item>
    
    <item>
      <title>转专业纪</title>
      <link>/posts/change-major-record/</link>
      <pubDate>Sat, 11 Jul 2015 20:05:57 +0800</pubDate>
      
      <guid>/posts/change-major-record/</guid>
      <description>人生的道路虽然漫长，但紧要处常常只有几步，特别是当年轻的时候。没有一个人的生活道路是笔直的，没有岔道的，有些岔道口，比如政治上的岔道口，事业上的岔道口，个人生活上的岔道口，你走错一步，可以影响人生的一</description>
    </item>
    
  </channel>
</rss>
