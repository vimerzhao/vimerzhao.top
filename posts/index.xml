<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on V大师在一号线</title>
    <link>/posts/</link>
    <description>Recent content in Posts on V大师在一号线</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 08 May 2021 19:41:53 +0800</lastBuildDate><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hugo&#43;Asciidoc配置记录</title>
      <link>/posts/configure-hugo-asciidoc-blog/</link>
      <pubDate>Sat, 08 May 2021 19:41:53 +0800</pubDate>
      
      <guid>/posts/configure-hugo-asciidoc-blog/</guid>
      <description>【2021-05-08】今天参考几篇文章，完成了Hugo博客的配置，特此记录一下： 搭建教程 Blogging with Asciidoctor and Hugo | Gabriel Arazas Better Hugo/AsciiDoc HTML - ratfactor diguage/www.diguage.com: &amp;#34;地瓜哥&amp;#34;博客网 使用 Hugo 搭建博客 - &amp;#34;地瓜哥&amp;#34;博客网 Mainroad/README.md</description>
    </item>
    
    <item>
      <title>AndroidStudio-Profile工具导致的一个奇怪问题</title>
      <link>/posts/android-profile-tool-bug-record/</link>
      <pubDate>Thu, 10 Dec 2020 12:36:32 +0800</pubDate>
      
      <guid>/posts/android-profile-tool-bug-record/</guid>
      <description>在使用AndroidStudio里面的Profile查看内存占用时，发现一个奇怪的现象： 应用启动后Native内存猛增，即使一个空的App也是如此，按理说不应该。于是用adb工具导出了一次内存： adb shell dumpsys</description>
    </item>
    
    <item>
      <title>Flutter源码剖析(四):flutter run流程解析</title>
      <link>/posts/flutter-source-code-analyze-4/</link>
      <pubDate>Sun, 22 Nov 2020 12:23:18 +0800</pubDate>
      
      <guid>/posts/flutter-source-code-analyze-4/</guid>
      <description>关于flutter run flutter run负责执行构建一个flutter工程，输出产物到对应设备，并负责提供基本的交互控制，使用效果如下： $ flutter run Launching lib/main.dart on COL AL10 in debug mode... Running Gradle task &amp;#39;assembleDebug&amp;#39;... Running Gradle task &amp;#39;assembleDebug&amp;#39;... Done 23.8s ✓ Built build/app/outputs/flutter-apk/app-debug.apk. Installing build/app/outputs/flutter-apk/app.apk... 13.7s Waiting for COL AL10 to report its views... 7ms Syncing files</description>
    </item>
    
    <item>
      <title>Flutter源码剖析(三):Flutter-Android-Embedder启动流程</title>
      <link>/posts/flutter-source-code-analyze-3/</link>
      <pubDate>Sun, 15 Nov 2020 12:23:15 +0800</pubDate>
      
      <guid>/posts/flutter-source-code-analyze-3/</guid>
      <description>概述 Flutter的启动包括Embedder、Engine、Framework三部分，本文仅描述Android平台的Embdder模块的启动流程。Flutter通常通过启动一个FlutterActiv</description>
    </item>
    
    <item>
      <title>Flutter源码剖析(二):源码的阅读与调试环境配置</title>
      <link>/posts/flutter-source-code-analyze-2/</link>
      <pubDate>Thu, 05 Nov 2020 12:23:13 +0800</pubDate>
      
      <guid>/posts/flutter-source-code-analyze-2/</guid>
      <description>综述 Flutter从架构上来说有3部分： 用Dart写的Framework层，面向开发者 用Java/Kotlin写的Embdder层（For Android，iOS是OC/Swift），纯Flutter A</description>
    </item>
    
    <item>
      <title>Flutter源码剖析(一):源码获取与构建</title>
      <link>/posts/flutter-source-code-analyze-1/</link>
      <pubDate>Thu, 29 Oct 2020 12:23:10 +0800</pubDate>
      
      <guid>/posts/flutter-source-code-analyze-1/</guid>
      <description>概述 本文介绍了Flutter源码的获取与构建，后面会另有文章介绍Flutter源码的版本管理、开发环境搭建等主题。 准备工作 Flutter源码分为两个部分： flutter/flutter是框架层，为开发</description>
    </item>
    
    <item>
      <title>Android系统服务的注册缓存机制分析</title>
      <link>/posts/android-system-service-cache-analyze/</link>
      <pubDate>Fri, 21 Aug 2020 12:18:22 +0800</pubDate>
      
      <guid>/posts/android-system-service-cache-analyze/</guid>
      <description>本文说明 本文虽名为《Android系统服务的注册缓存机制分析》，但主要记录的是笔者最近解决一个单机型Bug的经历。在解决这个Bug的过程中，我对于Android系统服务的注册缓存机制也有了更深入的了解</description>
    </item>
    
    <item>
      <title>Android客户端远程调试方法</title>
      <link>/posts/android-remote-debug-method/</link>
      <pubDate>Mon, 25 May 2020 12:16:13 +0800</pubDate>
      
      <guid>/posts/android-remote-debug-method/</guid>
      <description>在最近的需求开发中，会遇到一些兼容性问题，经常只能在特定ROM和Android版本上复现。由于测试和开发不在同一区域办公，往往需要通过物资穿梭车送手机。由此带来两点不便： 使用成本大，调试效率低，因为物</description>
    </item>
    
    <item>
      <title>插件化技术的演进之路</title>
      <link>/posts/evolution-of-plugin-framework/</link>
      <pubDate>Wed, 13 May 2020 12:14:43 +0800</pubDate>
      
      <guid>/posts/evolution-of-plugin-framework/</guid>
      <description>序言 关于本次分享 今天要和大家分享的是Android的插件化技术，这在Android中其实是一个相对来说比较复杂，历史悠久，内容庞杂的知识，不是今天一个小时能讲完的，所以我今天也是有选择地分享一些我认为</description>
    </item>
    
    <item>
      <title>设置Android全局可调试</title>
      <link>/posts/android-make-debuggable/</link>
      <pubDate>Thu, 07 May 2020 12:13:23 +0800</pubDate>
      
      <guid>/posts/android-make-debuggable/</guid>
      <description>背景 最近要看一些系统打印的日志，发现需要开启debuggable标志，于是调研了一下。 实现 参考https://www.renyiwei.com/archives/1704.html[Android修改</description>
    </item>
    
    <item>
      <title>Mac OSX配置记录</title>
      <link>/posts/mac-osx-config-record/</link>
      <pubDate>Mon, 04 May 2020 12:33:35 +0800</pubDate>
      
      <guid>/posts/mac-osx-config-record/</guid>
      <description>浏览器 下载Chrome 按键映射 下载Karabiner-Elements，按照 配置，就是自己习惯的键位了。 禁用大写锁定: “System Preferences” -&amp;gt; “Keyboard” -&amp;gt; “Modifier K</description>
    </item>
    
    <item>
      <title>Android P源码构建记录</title>
      <link>/posts/android-p-source-code-build/</link>
      <pubDate>Wed, 29 Apr 2020 12:11:29 +0800</pubDate>
      
      <guid>/posts/android-p-source-code-build/</guid>
      <description>缘由 最近在追查一个dex2oat的问题时，看源码觉得有些地方不单步调试或者加些日志，实在是不方便，另外由于最近的工作和Framework层打交道比较多，也有必要搞个源码环境，趁机深入学习一下。 虚拟机 一</description>
    </item>
    
    <item>
      <title>代码相似性检测工具</title>
      <link>/posts/software-similarity-tester/</link>
      <pubDate>Tue, 14 Apr 2020 12:33:16 +0800</pubDate>
      
      <guid>/posts/software-similarity-tester/</guid>
      <description>背景 最近由于工作需要，想找一个能够检查代码相似性的工具。这种工具主要有两个应用： 代码自身的冗余检查 查重，例如检查学生的编程作业是否有抄袭 工具 最后找到了两个工具sim和moss，具体实现算法还没有研究，</description>
    </item>
    
    <item>
      <title>我的tmux使用手册</title>
      <link>/posts/my-tmux-manual/</link>
      <pubDate>Sun, 05 Apr 2020 12:33:00 +0800</pubDate>
      
      <guid>/posts/my-tmux-manual/</guid>
      <description>基础概念 Session：用来概括一个任务，是一组窗口的集合。通过在任务开始前创建一个Session，在该Session中进行任务，之后通过断开Session来暂时中断任务，此时与任务相关的状态都会保存</description>
    </item>
    
    <item>
      <title>客户端调试日志编码之道</title>
      <link>/posts/zen-of-android-debug-log/</link>
      <pubDate>Thu, 05 Mar 2020 12:09:38 +0800</pubDate>
      
      <guid>/posts/zen-of-android-debug-log/</guid>
      <description>日志分很多种了，这里针对的是客户端的、开发调试用的日志，为什么要加这两个限制呢？ 后台日志都在服务器，开发容易操作，客户端日志大部分在本机，有的测试甚至不会捞日志，开发想帮忙都鞭长莫及 开发调试的日志，其</description>
    </item>
    
    <item>
      <title>基于Android签名机制的文件安全下发方法</title>
      <link>/posts/secure-file-transfer-base-on-android-signature/</link>
      <pubDate>Thu, 05 Mar 2020 12:05:39 +0800</pubDate>
      
      <guid>/posts/secure-file-transfer-base-on-android-signature/</guid>
      <description>问题背景 Android中存在大量需要动态下发文件的场景： 下发布局资源文件实现UI动态化 下发Dex文件、lua文件，实现局部功能的动态化 下发Android插件 下发多媒体资源等 等等 对于其中一些文件，如De</description>
    </item>
    
    <item>
      <title>Android安装包优化</title>
      <link>/posts/apk-size-opt-summary/</link>
      <pubDate>Tue, 11 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/apk-size-opt-summary/</guid>
      <description>背景 安装包膨胀的原因 业务的增加、产品的演进是安装包大小增加的本质原因。但是在演进之路上，由于一些所谓的技术债务，如： 使用的资源未经裁剪（如全量字体文件、分辨率过大的图片） 不合理的大资源（如大的视频、音</description>
    </item>
    
    <item>
      <title>Android安装包极限优化</title>
      <link>/posts/opt-apk-size-by-remove-debuginfo/</link>
      <pubDate>Fri, 17 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/opt-apk-size-by-remove-debuginfo/</guid>
      <description>背景 目前Android安装包的优化方法论比较成熟，比如 混淆代码（Proguard、AndResGuard） 移除不在使用的代码和资源 对于音频、图片等使用更轻量的格式 等等 这些方法都比较常规，在项目成熟后优</description>
    </item>
    
    <item>
      <title>警惕Proguard内联优化导致Crash堆栈信息丢失</title>
      <link>/posts/proguard-inline-optimieze-make-stacktrace-loss/</link>
      <pubDate>Mon, 13 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/proguard-inline-optimieze-make-stacktrace-loss/</guid>
      <description>背景 最近在处理异常时遇到一个诡异的问题：自己的Demo里面混淆一个类后，打印Crash堆栈时这个类里面的调用点直接失踪了！ 下面用测试代码说明。 测试代码 // MainActivity.java public class MainActivity extends AppCompatActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); new Test().fun1(); } } // Test.java public class Test</description>
    </item>
    
    <item>
      <title>Git工程化最佳实践</title>
      <link>/posts/git-practice/</link>
      <pubDate>Fri, 13 Dec 2019 12:32:25 +0800</pubDate>
      
      <guid>/posts/git-practice/</guid>
      <description>本文导读 本文对应的 git-standardize 项目地址 https://github.com/vimerzhao/git-standardize 问题背景 大部分程序员对于Git的理解还停留在 git add . git commit -m &amp;#34;update&amp;#34; git pull git push 的阶段，但这在实际项目开发中是远远不够的。 + 举一个简单的例子，现在我们需要过滤所有修复bug的提交，该怎</description>
    </item>
    
    <item>
      <title>Git内部原理剖析</title>
      <link>/posts/git-internals/</link>
      <pubDate>Tue, 26 Nov 2019 12:31:51 +0800</pubDate>
      
      <guid>/posts/git-internals/</guid>
      <description>导读 为什么写这篇文章 写这篇文章的本意有二: 工作安排原因，常有同事询问我一些关于 Git 的问题，总觉得自己解释的不够透彻，因此觉得有必要深入了解一下。 目前中文的 Git 教程往往本末倒置， 一味从版本管理工具的角度去堆</description>
    </item>
    
    <item>
      <title>YouGlish介绍</title>
      <link>/posts/introduction-of-youglish/</link>
      <pubDate>Sat, 23 Nov 2019 12:31:31 +0800</pubDate>
      
      <guid>/posts/introduction-of-youglish/</guid>
      <description>YouGlish是干嘛的呢？它的官网已经说的很清楚了: Use YouTube to improve your English pronunciation. Real people, real situations. 发现这个网站的起因是笔者在准备技术分享的时候涉及到一个专业名词 VSync ，这个词是 Vertical Sync的缩写，算是一个技术专有名词，用 YouGlish 一搜就</description>
    </item>
    
    <item>
      <title>Flutter:移动端跨平台技术演进之路</title>
      <link>/posts/cross-platform-mobile-ui-development-evolution/</link>
      <pubDate>Wed, 06 Nov 2019 12:21:29 +0800</pubDate>
      
      <guid>/posts/cross-platform-mobile-ui-development-evolution/</guid>
      <description>导读 本文约4688字，阅读可能需要15分钟。 最早的跨平台开发(摘自《Apache Cordova移动应用开发实战》王亚飞，王洪飞编著). 从广义上来说，跨平台技术早于移动端的出现。因此，本文标题前面也加上</description>
    </item>
    
  </channel>
</rss>
