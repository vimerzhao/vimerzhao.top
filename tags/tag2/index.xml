<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tag2 on V大师在一号线</title>
    <link>/tags/tag2/</link>
    <description>Recent content in tag2 on V大师在一号线</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 20 Dec 2020 19:49:29 +0800</lastBuildDate><atom:link href="/tags/tag2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>拿来主义与实证精神</title>
      <link>/posts/all-takenism-and-positivism/</link>
      <pubDate>Sun, 20 Dec 2020 19:49:29 +0800</pubDate>
      
      <guid>/posts/all-takenism-and-positivism/</guid>
      <description>由于工作原因，最近经常需要调研业界方案，因为很多很多东西没有必要重复造轮子，如果别人已经把问题解决了，那么直接使用是没啥问题的，这大概就是所谓的拿来主义。 其实纵观历史，尤其是近代，拿来主义其实不少，马</description>
    </item>
    
    <item>
      <title>做工具要有&#34;码德&#34;</title>
      <link>/posts/moral-of-developing-tools/</link>
      <pubDate>Thu, 10 Dec 2020 19:47:27 +0800</pubDate>
      
      <guid>/posts/moral-of-developing-tools/</guid>
      <description>最近在搞别的事情，没时间写公众号了，不过遇到值得写的，还是要草草记录一下的。 这周经历了一件比较奇葩的事情，大致时间线如下： 周四下午的时候，发现自己一个脚本使用的maven发布功能有一个奇怪的问题：正常</description>
    </item>
    
    <item>
      <title>AndroidStudio-Profile工具导致的一个奇怪问题</title>
      <link>/posts/android-profile-tool-bug-record/</link>
      <pubDate>Thu, 10 Dec 2020 12:36:32 +0800</pubDate>
      
      <guid>/posts/android-profile-tool-bug-record/</guid>
      <description>在使用AndroidStudio里面的Profile查看内存占用时，发现一个奇怪的现象： 应用启动后Native内存猛增，即使一个空的App也是如此，按理说不应该。于是用adb工具导出了一次内存： adb shell dumpsys</description>
    </item>
    
    <item>
      <title>Flutter源码剖析(四):flutter run流程解析</title>
      <link>/posts/flutter-source-code-analyze-4/</link>
      <pubDate>Sun, 22 Nov 2020 12:23:18 +0800</pubDate>
      
      <guid>/posts/flutter-source-code-analyze-4/</guid>
      <description>关于flutter run flutter run负责执行构建一个flutter工程，输出产物到对应设备，并负责提供基本的交互控制，使用效果如下： $ flutter run Launching lib/main.dart on COL AL10 in debug mode... Running Gradle task &amp;#39;assembleDebug&amp;#39;... Running Gradle task &amp;#39;assembleDebug&amp;#39;... Done 23.8s ✓ Built build/app/outputs/flutter-apk/app-debug.apk. Installing build/app/outputs/flutter-apk/app.apk... 13.7s Waiting for COL AL10 to report its views... 7ms Syncing files</description>
    </item>
    
    <item>
      <title>谈小步快跑</title>
      <link>/posts/thinking-on-sprint/</link>
      <pubDate>Wed, 18 Nov 2020 19:45:41 +0800</pubDate>
      
      <guid>/posts/thinking-on-sprint/</guid>
      <description>突然觉得需要好好理解一下小步快跑的含义，因为最近的工作就是一个需要小步快跑的工作。 经过一段时间的摸索之后，我觉得当前工作可以分为四个阶段： 接入，踩一遍可能遇到的坑，积累开发经验，证明性能和跨平台的可行</description>
    </item>
    
    <item>
      <title>Flutter源码剖析(三):Flutter-Android-Embedder启动流程</title>
      <link>/posts/flutter-source-code-analyze-3/</link>
      <pubDate>Sun, 15 Nov 2020 12:23:15 +0800</pubDate>
      
      <guid>/posts/flutter-source-code-analyze-3/</guid>
      <description>概述 Flutter的启动包括Embedder、Engine、Framework三部分，本文仅描述Android平台的Embdder模块的启动流程。Flutter通常通过启动一个FlutterActiv</description>
    </item>
    
    <item>
      <title>Flutter源码剖析(二):源码的阅读与调试环境配置</title>
      <link>/posts/flutter-source-code-analyze-2/</link>
      <pubDate>Thu, 05 Nov 2020 12:23:13 +0800</pubDate>
      
      <guid>/posts/flutter-source-code-analyze-2/</guid>
      <description>综述 Flutter从架构上来说有3部分： 用Dart写的Framework层，面向开发者 用Java/Kotlin写的Embdder层（For Android，iOS是OC/Swift），纯Flutter A</description>
    </item>
    
    <item>
      <title>Flutter源码剖析(一):源码获取与构建</title>
      <link>/posts/flutter-source-code-analyze-1/</link>
      <pubDate>Thu, 29 Oct 2020 12:23:10 +0800</pubDate>
      
      <guid>/posts/flutter-source-code-analyze-1/</guid>
      <description>概述 本文介绍了Flutter源码的获取与构建，后面会另有文章介绍Flutter源码的版本管理、开发环境搭建等主题。 准备工作 Flutter源码分为两个部分： flutter/flutter是框架层，为开发</description>
    </item>
    
    <item>
      <title>自我奋斗与历史进程</title>
      <link>/posts/self-struggle-and-historical-itinerary/</link>
      <pubDate>Fri, 09 Oct 2020 20:18:33 +0800</pubDate>
      
      <guid>/posts/self-struggle-and-historical-itinerary/</guid>
      <description>一 人生的道路虽然漫长，但要紧处常常只有几步，特别是当人年轻的时候。 没有一个人的生活道路是笔直的，没有岔道的，有些岔道口譬如政治上岔道口，个人生活上的岔道口，你走错一步，可以影响人生的一个时期，也可以影</description>
    </item>
    
    <item>
      <title>Android系统服务的注册缓存机制分析</title>
      <link>/posts/android-system-service-cache-analyze/</link>
      <pubDate>Fri, 21 Aug 2020 12:18:22 +0800</pubDate>
      
      <guid>/posts/android-system-service-cache-analyze/</guid>
      <description>本文说明 本文虽名为《Android系统服务的注册缓存机制分析》，但主要记录的是笔者最近解决一个单机型Bug的经历。在解决这个Bug的过程中，我对于Android系统服务的注册缓存机制也有了更深入的了解</description>
    </item>
    
    <item>
      <title>拾屋记</title>
      <link>/posts/clean-my-room/</link>
      <pubDate>Sun, 21 Jun 2020 20:16:53 +0800</pubDate>
      
      <guid>/posts/clean-my-room/</guid>
      <description>最近要搬家，周末收拾了下，记录一点感悟。 破窗效应 本来整洁有序的房间，因为一两次松懈，或是没有及时把用过的物品归回原位，或是没有及时清理产生的垃圾，就形成了一扇破窗。破窗的产生导致了自己对周围环境要求的</description>
    </item>
    
    <item>
      <title>Android客户端远程调试方法</title>
      <link>/posts/android-remote-debug-method/</link>
      <pubDate>Mon, 25 May 2020 12:16:13 +0800</pubDate>
      
      <guid>/posts/android-remote-debug-method/</guid>
      <description>在最近的需求开发中，会遇到一些兼容性问题，经常只能在特定ROM和Android版本上复现。由于测试和开发不在同一区域办公，往往需要通过物资穿梭车送手机。由此带来两点不便： 使用成本大，调试效率低，因为物</description>
    </item>
    
    <item>
      <title>插件化技术的演进之路</title>
      <link>/posts/evolution-of-plugin-framework/</link>
      <pubDate>Wed, 13 May 2020 12:14:43 +0800</pubDate>
      
      <guid>/posts/evolution-of-plugin-framework/</guid>
      <description>序言 关于本次分享 今天要和大家分享的是Android的插件化技术，这在Android中其实是一个相对来说比较复杂，历史悠久，内容庞杂的知识，不是今天一个小时能讲完的，所以我今天也是有选择地分享一些我认为</description>
    </item>
    
    <item>
      <title>设置Android全局可调试</title>
      <link>/posts/android-make-debuggable/</link>
      <pubDate>Thu, 07 May 2020 12:13:23 +0800</pubDate>
      
      <guid>/posts/android-make-debuggable/</guid>
      <description>背景 最近要看一些系统打印的日志，发现需要开启debuggable标志，于是调研了一下。 实现 参考https://www.renyiwei.com/archives/1704.html[Android修改</description>
    </item>
    
    <item>
      <title>不气盛叫年轻人吗？</title>
      <link>/posts/2020-youth-day/</link>
      <pubDate>Mon, 04 May 2020 20:16:02 +0800</pubDate>
      
      <guid>/posts/2020-youth-day/</guid>
      <description>这两天，被bilibili献给新一代的演讲《后浪》刷屏了，其实这是我们的老传统了，在这样一个意义重大的节日，讲一部分的真话，来刻意迎合一部分人的爽点。作为一个B站的中度用户，其实我是有点不喜欢的，但不</description>
    </item>
    
    <item>
      <title>Mac OSX配置记录</title>
      <link>/posts/mac-osx-config-record/</link>
      <pubDate>Mon, 04 May 2020 12:33:35 +0800</pubDate>
      
      <guid>/posts/mac-osx-config-record/</guid>
      <description>浏览器 下载Chrome 按键映射 下载Karabiner-Elements，按照 配置，就是自己习惯的键位了。 禁用大写锁定: “System Preferences” -&amp;gt; “Keyboard” -&amp;gt; “Modifier K</description>
    </item>
    
    <item>
      <title>老版《三国演义》中的曹操</title>
      <link>/posts/sanguo-caocao/</link>
      <pubDate>Sat, 02 May 2020 20:14:57 +0800</pubDate>
      
      <guid>/posts/sanguo-caocao/</guid>
      <description>近来看了一篇鲍国安先生在拍摄《三国演义》期间的创作手记，不禁感慨这才是一个演员的自我修养呀，比现在这些小鲜肉不知道高到哪里去了。这篇手记如果湮没在各种混杂的信息中实在太可惜，故此整理出来，也可警示自己</description>
    </item>
    
    <item>
      <title>Android P源码构建记录</title>
      <link>/posts/android-p-source-code-build/</link>
      <pubDate>Wed, 29 Apr 2020 12:11:29 +0800</pubDate>
      
      <guid>/posts/android-p-source-code-build/</guid>
      <description>缘由 最近在追查一个dex2oat的问题时，看源码觉得有些地方不单步调试或者加些日志，实在是不方便，另外由于最近的工作和Framework层打交道比较多，也有必要搞个源码环境，趁机深入学习一下。 虚拟机 一</description>
    </item>
    
    <item>
      <title>表达的世界观基础与方法论建设</title>
      <link>/posts/base-and-skill-of-presentation/</link>
      <pubDate>Sat, 25 Apr 2020 20:13:50 +0800</pubDate>
      
      <guid>/posts/base-and-skill-of-presentation/</guid>
      <description>编号004。 核心内容。 为什么想讲这个主题，起因之一就是自己第一次做技术分享时效果就很差，后面自己对此进行了一些反思。除此之外，自己也听过不少其他人（主要是技术同学）的分享，也会发现一些不足之处。所以我</description>
    </item>
    
    <item>
      <title>代码相似性检测工具</title>
      <link>/posts/software-similarity-tester/</link>
      <pubDate>Tue, 14 Apr 2020 12:33:16 +0800</pubDate>
      
      <guid>/posts/software-similarity-tester/</guid>
      <description>背景 最近由于工作需要，想找一个能够检查代码相似性的工具。这种工具主要有两个应用： 代码自身的冗余检查 查重，例如检查学生的编程作业是否有抄袭 工具 最后找到了两个工具sim和moss，具体实现算法还没有研究，</description>
    </item>
    
    <item>
      <title>我的tmux使用手册</title>
      <link>/posts/my-tmux-manual/</link>
      <pubDate>Sun, 05 Apr 2020 12:33:00 +0800</pubDate>
      
      <guid>/posts/my-tmux-manual/</guid>
      <description>基础概念 Session：用来概括一个任务，是一组窗口的集合。通过在任务开始前创建一个Session，在该Session中进行任务，之后通过断开Session来暂时中断任务，此时与任务相关的状态都会保存</description>
    </item>
    
    <item>
      <title>博客往事</title>
      <link>/posts/history-of-my-blog/</link>
      <pubDate>Sun, 15 Mar 2020 19:41:05 +0800</pubDate>
      
      <guid>/posts/history-of-my-blog/</guid>
      <description>周末花了点时间，把废置了的域名 www.vimerzhao.top 重新折腾了一下，同时将之前写过的博客迁移到了自己的服务器上。 借此机会，也以博客为脉络谈谈最近几年的技术经历吧。 CSDN 我大概是15年开始接触编程的，现在能找到的最早的博客是1</description>
    </item>
    
    <item>
      <title>客户端调试日志编码之道</title>
      <link>/posts/zen-of-android-debug-log/</link>
      <pubDate>Thu, 05 Mar 2020 12:09:38 +0800</pubDate>
      
      <guid>/posts/zen-of-android-debug-log/</guid>
      <description>日志分很多种了，这里针对的是客户端的、开发调试用的日志，为什么要加这两个限制呢？ 后台日志都在服务器，开发容易操作，客户端日志大部分在本机，有的测试甚至不会捞日志，开发想帮忙都鞭长莫及 开发调试的日志，其</description>
    </item>
    
    <item>
      <title>基于Android签名机制的文件安全下发方法</title>
      <link>/posts/secure-file-transfer-base-on-android-signature/</link>
      <pubDate>Thu, 05 Mar 2020 12:05:39 +0800</pubDate>
      
      <guid>/posts/secure-file-transfer-base-on-android-signature/</guid>
      <description>问题背景 Android中存在大量需要动态下发文件的场景： 下发布局资源文件实现UI动态化 下发Dex文件、lua文件，实现局部功能的动态化 下发Android插件 下发多媒体资源等 等等 对于其中一些文件，如De</description>
    </item>
    
    <item>
      <title>B站2月份创作者分析</title>
      <link>/posts/bilibili-report-2020-02/</link>
      <pubDate>Sun, 01 Mar 2020 19:57:34 +0800</pubDate>
      
      <guid>/posts/bilibili-report-2020-02/</guid>
      <description>Welcome Star and Issues: vimerzhao/BilibiliReport 各区投稿比例 前三： 游戏 生活 影视 头部区域细分比例 Top1000视频分布 稿件时长分布 每日投稿趋势 24小时投稿分布 结论 超过60%的创作发生在游戏区和生活区 播放最多的是代表视听的音乐区和娱乐区 但是收</description>
    </item>
    
    <item>
      <title>红利永远都在的</title>
      <link>/posts/there-are-chances-somewhere/</link>
      <pubDate>Mon, 10 Feb 2020 20:12:59 +0800</pubDate>
      
      <guid>/posts/there-are-chances-somewhere/</guid>
      <description>今天有个同事在群里分享了一件事情，他面试的一个人独立开发了一个多开app的应用（一种能让某台手机同时打开多个相同app技术，常见的如微信双开），去年年底已经实现了日入1000~2000的水平，实属让人</description>
    </item>
    
    <item>
      <title>成为一个完整的社会人</title>
      <link>/posts/base-ability/</link>
      <pubDate>Thu, 06 Feb 2020 20:11:55 +0800</pubDate>
      
      <guid>/posts/base-ability/</guid>
      <description>引言 本文是笔者的一些自我反思，工作一年半以来，不足之处的复盘。整理成文，以告过往，以警将来，希望对别人亦有所帮助。 本文将一个完整的社会人应该具备的能力分成了两大类：必修和选修。和大学里面的课程类似，必</description>
    </item>
    
    <item>
      <title>研究|2019鬼畜区热点事件分析</title>
      <link>/posts/2019-vichiku-summary-2/</link>
      <pubDate>Sat, 11 Jan 2020 19:53:53 +0800</pubDate>
      
      <guid>/posts/2019-vichiku-summary-2/</guid>
      <description>不小心把markdown删了，看公众号吧： 研究 | 2019鬼畜区热点事件分析</description>
    </item>
    
    <item>
      <title>通过7万条视频数据看2019年B站鬼畜区发生了什么</title>
      <link>/posts/2019-vichiku-summary/</link>
      <pubDate>Sun, 05 Jan 2020 19:51:58 +0800</pubDate>
      
      <guid>/posts/2019-vichiku-summary/</guid>
      <description>前言 鬼畜就是通过对严肃正经话题进行解剖后通过重复，再创作等形式用以达到颠覆经典、解构传统、张扬个性、强化焦点、讽刺社会的一种艺术形式。 引自百度百科 作为常年混迹于B站鬼畜区的潜水怪，今天心血来潮，趁着周</description>
    </item>
    
    <item>
      <title>2019年终总结</title>
      <link>/posts/2019-end/</link>
      <pubDate>Wed, 01 Jan 2020 20:02:29 +0800</pubDate>
      
      <guid>/posts/2019-end/</guid>
      <description>水逆的上半年 上半年其实是相当平淡的，回头想想，有很多事情可以去做，只是当时囿于那个环境和心态，不能下定决心去做。工作上经历了很多变动，很多老同事离开了团队，甚至组织架构也发生了变动，自己也在一次次的动</description>
    </item>
    
    <item>
      <title>文档编写的术与道</title>
      <link>/posts/tao-and-art-of-writing-tech-docs/</link>
      <pubDate>Thu, 19 Dec 2019 19:38:07 +0800</pubDate>
      
      <guid>/posts/tao-and-art-of-writing-tech-docs/</guid>
      <description>文档的范围很广，本文特指 开发人员撰写的包含基本产品背景和主要技术设计的文档 。 世界观 为什么要写技术文档 对于这个问题，我个人觉得很容易回答，写技术文档可以帮助团队完成 当前的信息共享和长期的知识传承 。对于个</description>
    </item>
    
    <item>
      <title>Git工程化最佳实践</title>
      <link>/posts/git-practice/</link>
      <pubDate>Fri, 13 Dec 2019 12:32:25 +0800</pubDate>
      
      <guid>/posts/git-practice/</guid>
      <description>本文导读 本文对应的 git-standardize 项目地址 https://github.com/vimerzhao/git-standardize 问题背景 大部分程序员对于Git的理解还停留在 git add . git commit -m &amp;#34;update&amp;#34; git pull git push 的阶段，但这在实际项目开发中是远远不够的。 + 举一个简单的例子，现在我们需要过滤所有修复bug的提交，该怎</description>
    </item>
    
    <item>
      <title>修改遗留代码的艺术</title>
      <link>/posts/working-effectively-with-legacy-code/</link>
      <pubDate>Mon, 02 Dec 2019 19:35:55 +0800</pubDate>
      
      <guid>/posts/working-effectively-with-legacy-code/</guid>
      <description>导语 之前内部的一次技术分享，为了防止PPT弄丢，特意整理成了文章，由于我的PPT风格比较简洁，所以额外加了一些批注。 + 注意这里图片缩小了，可以 新标签页打开图片 查看高清图。 正文 1. 2. 3. 4. 5. 6. 7 这页其实还内</description>
    </item>
    
    <item>
      <title>Git内部原理剖析</title>
      <link>/posts/git-internals/</link>
      <pubDate>Tue, 26 Nov 2019 12:31:51 +0800</pubDate>
      
      <guid>/posts/git-internals/</guid>
      <description>导读 为什么写这篇文章 写这篇文章的本意有二: 工作安排原因，常有同事询问我一些关于 Git 的问题，总觉得自己解释的不够透彻，因此觉得有必要深入了解一下。 目前中文的 Git 教程往往本末倒置， 一味从版本管理工具的角度去堆</description>
    </item>
    
    <item>
      <title>信息、思考、知识</title>
      <link>/posts/model-of-thinking/</link>
      <pubDate>Mon, 25 Nov 2019 20:01:28 +0800</pubDate>
      
      <guid>/posts/model-of-thinking/</guid>
      <description>最近在思考的一个问题，当一件热点事件发生的时候，如何能够透过各种声音看到问题的本质，并给出客观、全面的评价，这其实是一件非常困难的事情，我觉得必须具备三要素。 知识 知识就像机器学习里面的训练集。放到具体</description>
    </item>
    
    <item>
      <title>网易裁员碎碎念</title>
      <link>/posts/about-netease-staff/</link>
      <pubDate>Sun, 24 Nov 2019 19:59:50 +0800</pubDate>
      
      <guid>/posts/about-netease-staff/</guid>
      <description>这两天被一篇文章刷屏了，即 网易裁员，让保安把身患绝症的我赶出公司。我在网易亲身经历的噩梦！ 。 + 正好这周上了一门课叫《独立思考》，里面提到了认识真相的五大阻力： 从众心理 认知偏见 情绪干扰 思维局限 逻辑谬误 这</description>
    </item>
    
    <item>
      <title>YouGlish介绍</title>
      <link>/posts/introduction-of-youglish/</link>
      <pubDate>Sat, 23 Nov 2019 12:31:31 +0800</pubDate>
      
      <guid>/posts/introduction-of-youglish/</guid>
      <description>YouGlish是干嘛的呢？它的官网已经说的很清楚了: Use YouTube to improve your English pronunciation. Real people, real situations. 发现这个网站的起因是笔者在准备技术分享的时候涉及到一个专业名词 VSync ，这个词是 Vertical Sync的缩写，算是一个技术专有名词，用 YouGlish 一搜就</description>
    </item>
    
    <item>
      <title>Flutter:移动端跨平台技术演进之路</title>
      <link>/posts/cross-platform-mobile-ui-development-evolution/</link>
      <pubDate>Wed, 06 Nov 2019 12:21:29 +0800</pubDate>
      
      <guid>/posts/cross-platform-mobile-ui-development-evolution/</guid>
      <description>导读 本文约4688字，阅读可能需要15分钟。 最早的跨平台开发(摘自《Apache Cordova移动应用开发实战》王亚飞，王洪飞编著). 从广义上来说，跨平台技术早于移动端的出现。因此，本文标题前面也加上</description>
    </item>
    
    <item>
      <title>转专业纪</title>
      <link>/posts/change-major-record/</link>
      <pubDate>Sat, 11 Jul 2015 20:05:57 +0800</pubDate>
      
      <guid>/posts/change-major-record/</guid>
      <description>人生的道路虽然漫长，但紧要处常常只有几步，特别是当年轻的时候。没有一个人的生活道路是笔直的，没有岔道的，有些岔道口，比如政治上的岔道口，事业上的岔道口，个人生活上的岔道口，你走错一步，可以影响人生的一</description>
    </item>
    
  </channel>
</rss>
